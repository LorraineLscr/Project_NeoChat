{% extends 'base.html.twig' %}

{% block stylesheets %}
<link rel="stylesheet" href="{{asset('assets/css/chat.css')}}">
{% endblock %}

{% block title %}Salon : {{ channel.name }}{% endblock %}

{% block body %}

<div id="gradient"></div>
<div class="container">
    <div class="card border-primary mb-3" style="max-width: 90rem;">
        <div class="card-header"><i class="fa-regular fa-comments"></i>{{ channel.name }}</div>
        <div class="card-body">
            <div class="form-group">
                <div class="conversation">
                    {% for message in messages %}
                    {% if app.user == message.user %}
                    <div class="divMesMessages">
                        <div class="divUserMsg">
                            <div class="divImgAvatar" style="background-image : url('{{asset('assets/avatar/' ~ message.user.id ~ '.png')}}'); background-size: cover; background-position: center;"></div>
                            <p class="nomPerso">{{ message.user.pseudo }}</p>
                        </div>
                        <div class="messageEnvoye">{{ message.content }}</div>
                    </div>
                    {% else %}
                    <div class="mesMessagesRecus">
                        <div class="divUserMsg">
                            <div class="divImgAvatar" style="background-image : url('{{asset('assets/avatar/' ~ message.user.id ~ '.png')}}'); background-size: cover;background-position: center;"> </div>
                            <p class="nomPerso">{{ message.user.pseudo }}</p>
                        </div>
                        <div class="messageRecu">{{ message.content }}</div>
                    </div>
                    {% endif %}
                    {% endfor %}
                </div>
                <div>
                    <form id="form">
                        <input  id="message" class="one input-group-text col-sm-9" placeholder="Message" type="text"  autocomplete="off" />
                        <button type="button" class="first-btn btn btn-dark">üòÄ</button>
                        <button id="submit" type="submit" class="btn btn-dark col-sm-3">Envoyer</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
</div>


{% block javascript %}
<script src="{{asset('assets/js/vanillaEmojiPicker.js')}}"></script>
<script type="text/javascript">

    new EmojiPicker({
        trigger: [
            {
                selector: '.first-btn',
                insertInto: ['.one']
            }
        ],
        closeButton: false,
        specialButtons: '#AC6CFF'
    });

    let chatDiv = document.querySelector('.conversation');
    chatDiv.scrollTop = chatDiv.scrollHeight; // On souhaite scroller toujours jusqu'au dernier message du chat

    let form = document.getElementById('form');

    function handleForm(event) {
        event.preventDefault(); // Emp√™che la page de se rafra√Æchir apr√®s le submit du formulaire
    }
    form.addEventListener('submit', handleForm, );

    const submit = document.getElementById('submit');
    let count = 0;
    let maxCount = 5;
    setInterval(()=> {
            count = 0,
            message.setAttribute("placeholder", "Message");
        }, 20000);
    submit.onclick = e => { // On change le comportement du submit 
        const message = document.getElementById('message');
        count++;
        if(count > maxCount){
            message.setAttribute("placeholder", "Mets la p√©dale douce !");
            message.value = "";
        }
        else {
                // R√©cup√©ration du message dans l'input correspondant
            const data = { // La variable data sera envoy√©e au controller
                'content': message.value.replace(/<\/?[^>]+(>|$)/g, ""), // On transmet le message...
                'channel': {{ channel.id }} // ... Et le canal correspondant
            }
            message.value = ""; // pour supprimer l'input value apres l'envoi
            //console.log(data); // Pour v√©rifier vos informations
            fetch('/message', { // On envoie avec un post nos datas sur le endpoint /message de notre application
                method: 'POST',
                headers: {
                    "Content-Type": "application/json",
                    "accept": "application/json"
                },
                body: JSON.stringify(data) // On envoie les data sous format JSON
            }).then((response) => {
                console.log(response);
            });
        } 
    };
    const link = '{{ app.request.attributes.get('_links').getLinksbyRel('mercure')[0].getHref }}';
    const url = new URL(link);
    url.searchParams.append('topic', '/chat/{{ channel.id }}'); // On ajoute le topic souhait√© aux param√®tres de la requ√™te vers le Hub

    const eventSource = new EventSource(url, {withCredentials: false}); // On s'abonne au Hub

    const appUser = {{ app.user.id }};

    const audio = new Audio("{{asset('assets/sound/notif.wav')}}");

    eventSource.onmessage = ({data}) => { // On √©coute les √©v√©nements publi√©s par le Hub
        const message = JSON.parse(data);
        // Le contenu des √©v√©nements est sous format JSON, il faut le parser
        if(appUser === message.user.id) {
            document.querySelector('.conversation').innerHTML += 
            `<div class="divMesMessages">
            <div class="divUserMsg">
                <div class="divImgAvatar"
                                style="background-image : url('{{asset('assets/avatar/${ message.user.id }.png')}}'); background-size: cover; background-position: center;">
                            </div>
                <p class="nomPerso">${ message.user.pseudo }</p>
            </div>
            <div class="messageEnvoye">${ message.content }</div>
        </div>`
        } else {
            document.querySelector('.conversation').innerHTML += 
            `<div class="mesMessagesRecus">
            <div class="divUserMsg">
                <div class="divImgAvatar"
                                style="background-image : url('{{asset('assets/avatar/${ message.user.id }.png')}}'); background-size: cover; background-position: center;">
                            </div>
                <p class="nomPerso">${ message.user.pseudo }</p>
            </div>
            <div class="messageRecu">${ message.content }</div>
        </div>`
        audio.play();
        };
        
        chatDiv.scrollTop = chatDiv.scrollHeight;
         // On demande au navigateur de scroller le chat tout en bas pour bien apercevoir le dernier message apparu
        console.log(chatDiv);
    }
         
   
</script>
{% endblock %}

{% endblock %}